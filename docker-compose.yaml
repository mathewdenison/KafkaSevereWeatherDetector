version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network
    restart: always

  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_MESSAGE_MAX_BYTES: 2097152
      KAFKA_REPLICA_FETCH_MAX_BYTES: 2097152
      KAFKA_MAX_PARTITION_FETCH_BYTES: 2097152
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my-network
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    ports:
      - "8080:8080"
    networks:
      - my-network
    restart: on-failure

  frontend:
    build:
      context: ./frontend/temperature-alerts-ui
      dockerfile: Dockerfile
    depends_on:
      - backend
    environment:
      CHOKIDAR_USEPOLLING: "true"
      REACT_APP_BACKEND_URL: "http://localhost:8080" # Pass backend URL to the app
    ports:
      - "3000:3000" # Exposes frontend service's port
    networks:
      - my-network
    restart: always

networks:
  my-network:
    driver: bridge